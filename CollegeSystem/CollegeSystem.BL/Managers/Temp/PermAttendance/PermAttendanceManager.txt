using CollegeSystem.DAL.Models;
using CollegeSystem.DAL.UnitOfWork;
using FCISystem.DAL;

namespace CollegeSystem.DL;

public class TempAttendanceManager:ITempAttendanceManager
{
    private readonly ITempAttendanceRepo _tempAttendanceRepo;
    private readonly IUnitOfWork _unitOfWork;

    public TempAttendanceManager(ITempAttendanceRepo tempAttendanceRepo, IUnitOfWork unitOfWork)
    {
        _tempAttendanceRepo = tempAttendanceRepo;
        _unitOfWork = unitOfWork;
    }
    
    public void Add(TempAttendanceAddDto tempAttendanceAddDto)
    {
        var tempAttendance = new TempAttendance()
        {
            CourseId = tempAttendanceAddDto.CourseId,
            SectionId = tempAttendanceAddDto.SectionId,
            LectureId = tempAttendanceAddDto.LectureId,
            X = tempAttendanceAddDto.X,
            Y = tempAttendanceAddDto.Y,
        };
        _tempAttendanceRepo.Add(tempAttendance);
        _unitOfWork.CompleteAsync();
    }

    public void Update(TempAttendanceUpdateDto tempAttendanceUpdateDto)
    {
        var tempAttendance = _tempAttendanceRepo.GetById(tempAttendanceUpdateDto.TempAttendanceId);
        if (tempAttendance == null) return;
        tempAttendance.TempAttendanceId = tempAttendanceUpdateDto.TempAttendanceId;
        tempAttendance.CourseId = tempAttendanceUpdateDto.CourseId;
        tempAttendance.LectureId = tempAttendanceUpdateDto.LectureId;
        tempAttendance.SectionId = tempAttendanceUpdateDto.SectionId;
        tempAttendance.X = tempAttendanceUpdateDto.Y;
        tempAttendance.X = tempAttendanceUpdateDto.Y;
        
        _tempAttendanceRepo.Update(tempAttendance);
        _unitOfWork.CompleteAsync();
    }

    public void Delete(long id)
    {
        var tempAttendance = _tempAttendanceRepo.GetById(id);
        if (tempAttendance == null) return;
        _tempAttendanceRepo.Delete(tempAttendance);
        _unitOfWork.CompleteAsync();
    }

    public TempAttendanceReadDto? Get(long id)
    {
        var tempAttendance = _tempAttendanceRepo.GetById(id);
        if (tempAttendance == null) return null;
        return new TempAttendanceReadDto()
        {
            LectureId = tempAttendance.LectureId,
            SectionId = tempAttendance.SectionId,
            X = tempAttendance.X,
            CourseId = tempAttendance.CourseId,
            Y= tempAttendance.Y,
            
        };
    }

    public List<TempAttendanceReadDto> GetAll()
    {
        var tempAttendances = _tempAttendanceRepo.GetAll();
        return tempAttendances.Select(tempAttendance => new TempAttendanceReadDto()
        {
            LectureId = tempAttendance.LectureId,
            SectionId = tempAttendance.SectionId,
            X = tempAttendance.X,
            CourseId = tempAttendance.CourseId,
            Y = tempAttendance.Y,
            
        }).ToList();
    }
}