// <auto-generated />
using System;
using CollegeSystem.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CollegeSystem.DAL.Migrations
{
    [DbContext(typeof(CollegeSystemDbContext))]
    partial class CollegeSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CollegeSystem.DAL.Models.ActiveAllQuiz", b =>
                {
                    b.Property<long>("ActiveAllQuizzesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("active_all_quizzes_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActiveAllQuizzesId"));

                    b.Property<long?>("AllQuizzesId")
                        .HasColumnType("bigint")
                        .HasColumnName("all_quizzes_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.HasKey("ActiveAllQuizzesId");

                    b.HasIndex("AllQuizzesId");

                    b.ToTable("Active_All_Quizzes", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.ActiveQuiz", b =>
                {
                    b.Property<int>("ActiveQuizzesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("active_quizzes_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveQuizzesId"));

                    b.Property<long?>("QuizId")
                        .HasColumnType("bigint")
                        .HasColumnName("quiz_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.HasKey("ActiveQuizzesId");

                    b.HasIndex("QuizId");

                    b.ToTable("Active_Quizzes", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.AllQuestion", b =>
                {
                    b.Property<long>("AllQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("all_questions_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AllQuestionsId"));

                    b.Property<long?>("AllQuizzesId")
                        .HasColumnType("bigint")
                        .HasColumnName("all_quizzes_id");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer");

                    b.Property<string>("Choice1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("choice1");

                    b.Property<string>("Choice2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("choice2");

                    b.Property<string>("Choice3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("choice3");

                    b.Property<string>("Choice4")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("choice4");

                    b.Property<string>("Choice5")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("choice5");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question");

                    b.HasKey("AllQuestionsId");

                    b.HasIndex("AllQuizzesId");

                    b.ToTable("All_Questions", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.AllQuiz", b =>
                {
                    b.Property<long>("AllQuizzesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("all_quizzes_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AllQuizzesId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<string>("Instructor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("instructor");

                    b.Property<string>("MaxDegree")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("max_degree");

                    b.Property<string>("MaxTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("max_time");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("AllQuizzesId");

                    b.HasIndex("CourseId");

                    b.ToTable("All_Quizzes", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long?>("QuizId")
                        .HasColumnType("bigint")
                        .HasColumnName("quiz_id");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("StudentMark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("student_mark");

                    b.HasKey("AnswerId");

                    b.HasIndex("CourseId");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.AnswerAllQuiz", b =>
                {
                    b.Property<long>("AnswerAllQuizzesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("answer_all_quizzes_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnswerAllQuizzesId"));

                    b.Property<long?>("AllQuizzesId")
                        .HasColumnType("bigint")
                        .HasColumnName("all_quizzes_id");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("StudentMark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("student_mark");

                    b.HasKey("AnswerAllQuizzesId");

                    b.HasIndex("AllQuizzesId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Answer_All_Quizzes", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Assignment", b =>
                {
                    b.Property<long>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AssignmentId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.AssignmentAnswer", b =>
                {
                    b.Property<long>("AssignmentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("assignment_answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AssignmentAnswerId"));

                    b.Property<long?>("AssignmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assignment_id");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.HasKey("AssignmentAnswerId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Assignment_Answers", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Course", b =>
                {
                    b.Property<long>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CourseId"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Hours")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("hours");

                    b.Property<string>("Img")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("img");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("level");

                    b.Property<string>("Link")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Term")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("term");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.CourseStaff", b =>
                {
                    b.Property<int>("CourseStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_staff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseStaffId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long?>("StaffId")
                        .HasColumnType("bigint");

                    b.HasKey("CourseStaffId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StaffId");

                    b.ToTable("Course_Staff", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.CourseUser", b =>
                {
                    b.Property<long>("CourseUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("course_user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CourseUserId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<string>("Degree")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("degree");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("CourseUserId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Course_Users", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dept_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptId"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("HeadOfDepartment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("head_of_department");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DeptId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Lecture", b =>
                {
                    b.Property<long>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("lecture_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LectureId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("LectureId")
                        .HasName("PK_Lecture");

                    b.HasIndex("CourseId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.LectureAssignment", b =>
                {
                    b.Property<long>("LectureAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("lecture_assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LectureAssignmentId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<long?>("LectureId")
                        .HasColumnType("bigint")
                        .HasColumnName("lecture_id");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("LectureAssignmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LectureId");

                    b.ToTable("Lecture_Assignments", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.LectureAssignmentAnswer", b =>
                {
                    b.Property<long>("LectureAssignmentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("lecture_assignment_answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LectureAssignmentAnswerId"));

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<long?>("LectureAssignmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("lecture_assignment_id");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("LectureAssignmentAnswerId");

                    b.HasIndex("LectureAssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Lecture_Assignment_Answers", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.ParentCall", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MessageId"));

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("ParentEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("parent_email");

                    b.HasKey("MessageId");

                    b.ToTable("Parent_calls", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.PermAttendance", b =>
                {
                    b.Property<long>("PermAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("perm_attendance_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PermAttendanceId"));

                    b.Property<int?>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long>("LectureId")
                        .HasColumnType("bigint")
                        .HasColumnName("lecture_id");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint")
                        .HasColumnName("section_id");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("PermAttendanceId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LectureId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("perm_attendances", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PostId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<string>("Img")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("img");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("PostId");

                    b.HasIndex("StudentId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.PostUser", b =>
                {
                    b.Property<long>("PostUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("post_user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PostUserId"));

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long?>("StaffId")
                        .HasColumnType("bigint")
                        .HasColumnName("staff_id");

                    b.Property<long?>("StaffId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint")
                        .HasColumnName("student_id");

                    b.HasKey("PostUserId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StaffId1");

                    b.HasIndex("StudentId");

                    b.ToTable("PostUsers");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("answer");

                    b.Property<string>("Choice1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("choice1");

                    b.Property<string>("Choice2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("choice2");

                    b.Property<string>("Choice3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("choice3");

                    b.Property<string>("Choice4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("choice4");

                    b.Property<string>("Choice5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("choice5");

                    b.Property<string>("Question1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("question");

                    b.Property<long?>("QuizId")
                        .HasColumnType("bigint")
                        .HasColumnName("quiz_id");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Quiz", b =>
                {
                    b.Property<long>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("quiz_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuizId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<string>("Instructor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("instructor");

                    b.Property<string>("MaxDegree")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("max_degree");

                    b.Property<string>("MaxTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("max_time");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("QuizId");

                    b.HasIndex("CourseId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Reply", b =>
                {
                    b.Property<long>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("reply_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReplyId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("ReplyId");

                    b.HasIndex("PostId");

                    b.HasIndex("StudentId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Section", b =>
                {
                    b.Property<long>("SectionsId")
                        .HasColumnType("bigint")
                        .HasColumnName("sections_id");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("SectionsId");

                    b.HasIndex("CourseId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.SectionAssignment", b =>
                {
                    b.Property<long>("SectionAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("section_assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SectionAssignmentId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint")
                        .HasColumnName("section_id");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("SectionAssignmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SectionId");

                    b.ToTable("Section_Assignments", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.SectionAssignmentAnswer", b =>
                {
                    b.Property<long>("SectionAssignmentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("section_assignment_answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SectionAssignmentAnswerId"));

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<long?>("SectionAssignmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("section_assignment_id");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("SectionAssignmentAnswerId");

                    b.HasIndex("SectionAssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Section_Assignment_Answers", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.TempAttendance", b =>
                {
                    b.Property<long>("TempAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("temp_attendance_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TempAttendanceId"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long?>("LectureId")
                        .HasColumnType("bigint")
                        .HasColumnName("lecture_id");

                    b.Property<string>("RandomCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("random_code");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint")
                        .HasColumnName("section_id");

                    b.Property<string>("X")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("x");

                    b.Property<string>("Y")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("y");

                    b.HasKey("TempAttendanceId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LectureId");

                    b.HasIndex("SectionId");

                    b.ToTable("Temp_Attendances", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Parent", b =>
                {
                    b.HasBaseType("CollegeSystem.DAL.Models.ApplicationUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Staff", b =>
                {
                    b.HasBaseType("CollegeSystem.DAL.Models.ApplicationUser");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("img");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Student", b =>
                {
                    b.HasBaseType("CollegeSystem.DAL.Models.ApplicationUser");

                    b.Property<string>("ArabicName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("arabic_name");

                    b.Property<int?>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("Dept_Id");

                    b.Property<DateTime>("EmailVerifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("img");

                    b.Property<string>("ParentEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("parent_email");

                    b.Property<string>("ParentPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("parent_phone");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Ssn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ssn");

                    b.Property<string>("UniversityEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("university_email");

                    b.HasIndex("DeptId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.ActiveAllQuiz", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.AllQuiz", "AllQuizzes")
                        .WithMany("ActiveAllQuizzes")
                        .HasForeignKey("AllQuizzesId")
                        .HasConstraintName("FK_Active_All_Quizzes_All_Quizzes");

                    b.Navigation("AllQuizzes");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.ActiveQuiz", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Quiz", "Quiz")
                        .WithMany("ActiveQuizzes")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK_Active_Quizzes_Quizzes");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.AllQuestion", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.AllQuiz", "AllQuizzes")
                        .WithMany("AllQuestions")
                        .HasForeignKey("AllQuizzesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_All_Questions_All_Quizzes");

                    b.Navigation("AllQuizzes");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.AllQuiz", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("AllQuizzes")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_All_Quizzes_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Answer", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("Answers")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Answers_Courses");

                    b.HasOne("CollegeSystem.DAL.Models.Quiz", "Quiz")
                        .WithMany("Answers")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK_Answers_Quizzes_1");

                    b.HasOne("CollegeSystem.DAL.Models.Student", "Student")
                        .WithMany("Answers")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.AnswerAllQuiz", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.AllQuiz", "AllQuizzes")
                        .WithMany("AnswerAllQuizzes")
                        .HasForeignKey("AllQuizzesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Answer_All_Quizzes_All_Quizzes");

                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("AnswerAllQuizzes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Answer_All_Quizzes_Courses_2");

                    b.HasOne("CollegeSystem.DAL.Models.Student", "Student")
                        .WithMany("AnswerAllQuizzes")
                        .HasForeignKey("StudentId");

                    b.Navigation("AllQuizzes");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Assignment", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Assignments_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.AssignmentAnswer", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Assignment", "Assignment")
                        .WithMany("AssignmentAnswers")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK_Assignment_Answers_Assignments");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.CourseStaff", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("CourseStaffs")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Course_Staff_Courses");

                    b.HasOne("CollegeSystem.DAL.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Course");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.CourseUser", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("CourseUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Course_Users_Courses_1");

                    b.HasOne("CollegeSystem.DAL.Models.Student", "Student")
                        .WithMany("CourseUsers")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Lecture", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Lecture_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.LectureAssignment", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", null)
                        .WithMany("LectureAssignments")
                        .HasForeignKey("CourseId");

                    b.HasOne("CollegeSystem.DAL.Models.Lecture", "Lecture")
                        .WithMany("LectureAssignments")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Lecture_Assignments_Lectures");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.LectureAssignmentAnswer", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.LectureAssignment", "LectureAssignment")
                        .WithMany("LectureAssignmentAnswers")
                        .HasForeignKey("LectureAssignmentId")
                        .HasConstraintName("FK_Lecture_Assignment_Answers_Lecture_Assignments_1");

                    b.HasOne("CollegeSystem.DAL.Models.Student", "Student")
                        .WithMany("LectureAssignmentAnswers")
                        .HasForeignKey("StudentId");

                    b.Navigation("LectureAssignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.PermAttendance", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("PermAttendances")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_perm_attendances_Courses");

                    b.HasOne("CollegeSystem.DAL.Models.Lecture", "Lecture")
                        .WithMany("PermAttendances")
                        .HasForeignKey("LectureId")
                        .IsRequired()
                        .HasConstraintName("FK_perm_attendances_Lectures_2");

                    b.HasOne("CollegeSystem.DAL.Models.Section", "Section")
                        .WithMany("PermAttendances")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_perm_attendances_Sections_1");

                    b.HasOne("CollegeSystem.DAL.Models.Student", "Student")
                        .WithMany("PermAttendances")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Lecture");

                    b.Navigation("Section");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Post", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Student", null)
                        .WithMany("Posts")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.PostUser", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Post", "Post")
                        .WithMany("PostUsers")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Post_Users_Staffs");

                    b.HasOne("CollegeSystem.DAL.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId1");

                    b.HasOne("CollegeSystem.DAL.Models.Student", "Student")
                        .WithMany("PostUsers")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Post_Users_Students");

                    b.Navigation("Post");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Question", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK_Questions_Quizzes");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Quiz", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("Quizzes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Quizzes_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Reply", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Replies_Posts");

                    b.HasOne("CollegeSystem.DAL.Models.Student", "Student")
                        .WithMany("Replies")
                        .HasForeignKey("StudentId");

                    b.Navigation("Post");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Section", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Sections_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.SectionAssignment", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", null)
                        .WithMany("SectionAssignments")
                        .HasForeignKey("CourseId");

                    b.HasOne("CollegeSystem.DAL.Models.Section", "Section")
                        .WithMany("SectionAssignments")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Section_Assignments_Sections");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.SectionAssignmentAnswer", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.SectionAssignment", "SectionAssignment")
                        .WithMany("SectionAssignmentAnswers")
                        .HasForeignKey("SectionAssignmentId")
                        .HasConstraintName("FK_Section_Assignment_Answers_Section_Assignments");

                    b.HasOne("CollegeSystem.DAL.Models.Student", "Student")
                        .WithMany("SectionAssignmentAnswers")
                        .HasForeignKey("StudentId");

                    b.Navigation("SectionAssignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.TempAttendance", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Course", "Course")
                        .WithMany("TempAttendances")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Temp_Attendances_Courses");

                    b.HasOne("CollegeSystem.DAL.Models.Lecture", "Lecture")
                        .WithMany("TempAttendances")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_Temp_Attendances_Lectures_1");

                    b.HasOne("CollegeSystem.DAL.Models.Section", "Section")
                        .WithMany("TempAttendances")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Temp_Attendances_Sections_2");

                    b.Navigation("Course");

                    b.Navigation("Lecture");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CollegeSystem.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Parent", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("CollegeSystem.DAL.Models.Parent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Staff", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("CollegeSystem.DAL.Models.Staff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Student", b =>
                {
                    b.HasOne("CollegeSystem.DAL.Models.Department", "Dept")
                        .WithMany("Users")
                        .HasForeignKey("DeptId");

                    b.HasOne("CollegeSystem.DAL.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("CollegeSystem.DAL.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dept");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.AllQuiz", b =>
                {
                    b.Navigation("ActiveAllQuizzes");

                    b.Navigation("AllQuestions");

                    b.Navigation("AnswerAllQuizzes");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Assignment", b =>
                {
                    b.Navigation("AssignmentAnswers");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Course", b =>
                {
                    b.Navigation("AllQuizzes");

                    b.Navigation("AnswerAllQuizzes");

                    b.Navigation("Answers");

                    b.Navigation("Assignments");

                    b.Navigation("CourseStaffs");

                    b.Navigation("CourseUsers");

                    b.Navigation("LectureAssignments");

                    b.Navigation("Lectures");

                    b.Navigation("PermAttendances");

                    b.Navigation("Quizzes");

                    b.Navigation("SectionAssignments");

                    b.Navigation("Sections");

                    b.Navigation("TempAttendances");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Lecture", b =>
                {
                    b.Navigation("LectureAssignments");

                    b.Navigation("PermAttendances");

                    b.Navigation("TempAttendances");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.LectureAssignment", b =>
                {
                    b.Navigation("LectureAssignmentAnswers");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Post", b =>
                {
                    b.Navigation("PostUsers");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Quiz", b =>
                {
                    b.Navigation("ActiveQuizzes");

                    b.Navigation("Answers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Section", b =>
                {
                    b.Navigation("PermAttendances");

                    b.Navigation("SectionAssignments");

                    b.Navigation("TempAttendances");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.SectionAssignment", b =>
                {
                    b.Navigation("SectionAssignmentAnswers");
                });

            modelBuilder.Entity("CollegeSystem.DAL.Models.Student", b =>
                {
                    b.Navigation("AnswerAllQuizzes");

                    b.Navigation("Answers");

                    b.Navigation("CourseUsers");

                    b.Navigation("LectureAssignmentAnswers");

                    b.Navigation("PermAttendances");

                    b.Navigation("PostUsers");

                    b.Navigation("Posts");

                    b.Navigation("Replies");

                    b.Navigation("SectionAssignmentAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
